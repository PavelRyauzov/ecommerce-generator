generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  password  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Collection {
  id       Int       @id @default(autoincrement())
  title    String
  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("collection")
}

model Product {
  id               Int              @id @default(autoincrement())
  availableForSale Boolean
  title            String
  description      String
  price            Money?           @relation("ProductPrice", fields: [priceId], references: [id])
  priceId          Int?             @unique @default(0)
  collection       Collection       @relation(fields: [collectionId], references: [id])
  collectionId     Int
  featuredImage    Image?           @relation("FeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId  Int?             @unique
  images           Image[]          @relation("Images")
  characteristics  Characteristic[] @relation("Characterstics")

  CartItem CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product")
}

model Image {
  id         Int      @id @default(autoincrement())
  fileName   String
  altText    String
  featuredBy Product? @relation("FeaturedImage")
  product    Product  @relation("Images", fields: [productId], references: [id])
  productId  Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("image")
}

model Characteristic {
  id               Int     @id @default(autoincrement())
  availableForSale Boolean
  title            String
  product          Product @relation("Characterstics", fields: [productId], references: [id])
  productId        Int
  price            Money?  @relation("CharacteristicPrice", fields: [priceId], references: [id])
  priceId          Int?    @unique @default(0)

  cartItem CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("characteristic")
}

model Money {
  id             Int             @id @default(autoincrement())
  amount         Int
  currencyCode   String          @default("RUB")
  product        Product?        @relation("ProductPrice")
  characteristic Characteristic? @relation("CharacteristicPrice")
  CartItem       CartItem?       @relation("CartItemTotalAmount")
  Cart           Cart?           @relation("CartTotalAmount")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("price")
}

model Cart {
  id            Int        @id @default(autoincrement())
  lines         CartItem[]
  totalQuantity Int
  totalAmount   Money      @relation("CartTotalAmount", fields: [moneyId], references: [id])
  moneyId       Int        @unique @default(0)
}

model CartItem {
  id               Int            @id @default(autoincrement())
  quantity         Int
  totalAmount      Money          @relation("CartItemTotalAmount", fields: [moneyId], references: [id])
  moneyId          Int            @unique @default(0)
  product          Product        @relation(fields: [productId], references: [id])
  productId        Int
  characteristic   Characteristic @relation(fields: [characteristicId], references: [id])
  characteristicId Int

  Cart   Cart? @relation(fields: [cartId], references: [id])
  cartId Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
